{"version":3,"sources":["utils/API.js","components/Button/Button.js","components/Navbar/Navbar.js","components/ServiceCard/ServiceCard.js","App.js","serviceWorker.js","index.js","components/ServiceCard/images/database-solid.svg","components/ServiceCard/images/settings-ethernet.svg","components/ServiceCard/images/server-solid.svg","components/ServiceCard/images/file-alt-solid.svg"],"names":["axios","get","ButtonLink","props","style","text","NavBar","Navbar","className","Button","backgroundColor","ServiceCard","options","data","service","labels","datasets","data1","data2","color1","color2","categoryPercentage","barPercentage","legend","display","scales","yAxes","ticks","beginAtZero","xAxes","rotation","Math","PI","circumference","src","icon","alt","cardHeader","cardInfo","cardDetail","App","useState","users","setUsers","useEffect","API","then","res","catch","err","console","log","map","user","data1Percent","type","server","database","storage","network","data_2","data_1","key","id","name","info","spec","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.8344191c.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n  getServices: function() {\n    return axios.get('https://cors-anywhere.herokuapp.com/https://5f416e83d4b4790016fd720f.mockapi.io/users');\n  }\n}","import React from 'react';\nimport './style.css';\n\nfunction ButtonLink(props) {\n  return (\n  <button style={props.style}>{props.text}</button>\n  )\n} \n\nexport default ButtonLink;","import React from 'react';\nimport Button from './../Button/Button';\nimport Navbar from 'react-bootstrap/Navbar';\nimport \"./style.css\";\n\nfunction NavBar() {\n\n  const styleTeam = { backgroundColor: \"#6b8896\", }\n  const styleAddService = { backgroundColor: \"#299efc\", }\n\n  return (\n    <Navbar className=\"navbar\">\n      <h1>Wilfring Ltd.</h1>\n      <div>\n\n      <Button \n        style={styleTeam}\n        text=\"Teams\"\n        />\n      <Button \n        style={styleAddService}\n        text=\"Add Service\"\n        />\n      </div>\n\n    </Navbar>\n  )\n}\n\nexport default NavBar;","import React from 'react';\nimport './style.css';\n\nimport { Doughnut, Bar } from 'react-chartjs-2';\n\nfunction ServiceCard(props) {\n\n  let options;\n  let data;\n\n  if (props.service === 'network') {\n    data = {\n      labels: ['DOWNLOAD', 'UPLOAD'],\n      datasets: [{\n        data: [props.data1, props.data2],\n        backgroundColor: [props.color1, props.color2],\n        categoryPercentage: 1.0,\n        barPercentage: 1.0,\n      }]\n    };\n\n    options = {\n      legend: { display: false },\n      scales: {\n        yAxes: [{ \n          display: false,\n          ticks: { beginAtZero: true }\n        }],\n        xAxes: [{ display: false }],        \n      },\n    }\n  } else {\n    data = {\n      labels: ['USED', 'AVAILABLE'],\n      datasets: [{\n        data: [props.data1, props.data2],\n        backgroundColor: [props.color1, props.color2]\n      }]\n    };\n    options = {\n      legend: { display: false },\n      rotation: 1 * Math.PI,\n      circumference: 1 * Math.PI\n    }\n  }\n\n  return (\n    <div className=\"service-card\">\n      <div className=\"card-icon\">\n        <img src={props.icon} alt={props.alt}/>\n      </div>\n      <div className=\"card-info\">\n        <h1>{props.cardHeader}</h1>\n        <p>{props.cardInfo}</p>\n        <p>{props.cardDetail}</p>\n      </div>\n      <div className=\"card-graph\">\n        { props.service === 'network' &&\n          <Bar \n            data={data}\n            options={options}\n          />\n        }\n        { props.service !== 'network' &&\n          <Doughnut \n            data={data} \n            options={options}\n          />\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default ServiceCard;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport API from './utils/API';\n\nimport Navbar from './components/Navbar/Navbar';\nimport ServiceCard from './components/ServiceCard/ServiceCard';\n\nimport database from './components/ServiceCard/images/database-solid.svg';\nimport network from './components/ServiceCard/images/settings-ethernet.svg';\nimport server from './components/ServiceCard/images/server-solid.svg';\nimport storage from './components/ServiceCard/images/file-alt-solid.svg';\n\n\nfunction App() {\n\n  const [users, setUsers] = useState(null);\n\n  useEffect(() => {\n    API.getServices()\n      .then(res => {\n        setUsers(res.data);\n      })\n      .catch(err => console.log(err));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className='services'>\n        { users && users.map(user => {\n\n          let service = user.type;\n          let icon;\n          let alt;\n          let color1;\n          let color2;\n          let data2;\n          let data1Percent;\n\n          switch(service) {\n            case 'server':\n              icon = server;\n              alt = 'server-icon';\n              color2 = '#e4e4e4';\n              break;\n            case 'database':\n              icon = database;\n              alt = 'database-icon';\n              color2 = '#e4e4e4';\n              break;\n            case 'storage':\n              icon = storage;\n              alt = 'storage-icon';\n              color2 = '#e4e4e4';\n              break;\n            default:\n              icon = network;\n              alt = 'network-icon';\n              color1 = '#2382bd';\n              color2 = '#f78103';\n              data2 = user.data_2;\n          }\n\n          if (user.type !== 'network') {\n            data2 = user.data_2 - user.data_1;\n            data1Percent = user.data_1 / user.data_2;\n            if (data1Percent < 0.5 ) {\n              color1 = '#6cb94c';\n            } else if ( data1Percent >= 0.5 && data1Percent < 0.8 ) {\n              color1 = '#f78103';\n            } else {\n              color1 = '#ea1709';\n            }\n          }\n\n          return <ServiceCard \n            key = {user.id}\n            service={service}\n            icon={icon}\n            alt={alt}\n            cardHeader={user.name}\n            cardInfo={user.info}\n            cardDetail={user.spec}\n            data1={user.data_1}\n            data2={data2}\n            color1={color1}\n            color2={color2}\n          />\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/database-solid.1d23af98.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings-ethernet.2e1d2b47.svg\";","module.exports = __webpack_public_path__ + \"static/media/server-solid.92c7d580.svg\";","module.exports = __webpack_public_path__ + \"static/media/file-alt-solid.cf5e4039.svg\";"],"sourceRoot":""}